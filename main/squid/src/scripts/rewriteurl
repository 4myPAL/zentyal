#!/usr/bin/perl
# Copyright (C) 2014 Zentyal S.L.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use strict;
use warnings;
use File::Slurp;

my %substByDomain;

sub _log
{
    my ($msg) = @_;
    system "echo '$msg' >> /tmp/log";
}

my $safeSearch;
my $safeSearchPath = '/etc/squid3/safesearch';
if (-r $safeSearchPath) {
    _log("Safe search file found");
    $safeSearch = File::Slurp::read_file($safeSearchPath);
    _log("safeSearc contents: $safeSearch");
    if ($safeSearch) {
        _log("Adding safe search domains");
        %substByDomain = (
            'google' => [qr{([?&])safe=[^&]*}, 'safe=vss'],
            'bing'   => [qr{([?&])adlt=[^&]*}, 'adlt=strict'],
            'yahoo'  => [qr{([?&])vm=[^&]*}, 'vm=r'],
           );
    }
}
    _log("safeSearch : " . ($safeSearch ? 'Y' : 'N'));


my $edufilter;
my $edufilterPath = '/etc/squid3/edufilter';
if (-r $edufilterPath) {
    _log("edu file found");
    $edufilter = File::Slurp::read_file($edufilterPath);
    _log("Safe search file contents: $edufilter");
    if ($edufilter) {
        _log("Adding youtube domains");
        $substByDomain{youtube} =  [qr{([?&])edufilter=[^&]*}, "edufilter=$edufilter"],
    }
}
    _log("edufiler : " . ($edufilter ? 'Y' : 'N'));

$| = 1;
while (1) {
    my $line = <>;
    $line or next;
    my ($url) = split '\s', $line, 3;
    $url or next;

    my $response = '';
    # extract possible domains
    $url =~ m{^.*?//(.*?)[/?]};
    my @parts = split('\.', $1);
    my $domain = $parts[-2];
    _log("$url -> domain $domain");
    if ($domain and exists $substByDomain{$domain}) {
        my ($removeRe, $replacement) = @{ $substByDomain{$domain} };
        _log("Domain foun $domain -> $removeRe $replacement");
        my $replaced = $url =~ s/$removeRe/$1$replacement/;
        if (not $replaced) {
            if ($url =~ m/\?/) {
                $url .= '&';
            } else {
                $url .= '?';
            }

            $url .= $replacement;
        }

        _log("RESPONSE: $url");
        $response = $url;
    }

    print $response, "\n";
}

1;
