#!/usr/bin/perl

# Copyright (C) 2012-2013 Zentyal S.L.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use strict;
use warnings;

use EBox;
use EBox::Config;
use EBox::Global;
use EBox::Users::Group;
use EBox::Users::User;

use Error qw(:try);
use File::Slurp;
use Time::gmtime;

my %ignoreOUs = map {( $_ => $_)} qw(Users Groups Computers Builtin Kerberos postfix zarafa Extensions Queues);
my @ignoreChildrenOUs = qw(postfix Kerberos zarafa Extensions);

sub getTimestamp
{
    my $time = gmtime();
    my $timestamp = sprintf("%04d%02d%02d%02d%02d%02d",
        $time->year + 1900, $time->mon + 1, $time->mday,
        $time->hour, $time->min, $time->sec);
    return $timestamp;
}

sub ignoreOU
{
    my ($ouName) = @_;

    return ((exists $ignoreOUs{$ouName}) or
            (grep { $ouName =~ /^$_\// } @ignoreChildrenOUs));
}

EBox::init();

my $sambaTimestampFile = EBox::Config::home() . '.s4sync_ts';
unless (-f $sambaTimestampFile) {
    write_file($sambaTimestampFile, '0');
}

my $ro = 1;
my $global = EBox::Global->getInstance($ro);
my $sambaModule = $global->modInstance('samba');
my $usersModule = $global->modInstance('users');

while (1) {
    # Sleeping at the loop start gives time to samba daemon to fully start
    sleep (30);
    next unless ($sambaModule->isEnabled() and $sambaModule->getProvision->isProvisioned());

    # The Administrator user, 'Domain Users' and 'Domain admins' groups are special case entries.
    # Those are Zentyal system user and groups so don't appear by default on list actions.
    my $ldb = $sambaModule->ldb();
    my $domainSID = $ldb->domainSID();
    my $domainAdminSID = "$domainSID-500";
    my $domainUsersSID = "$domainSID-513";
    my $domainAdminsSID = "$domainSID-512";

    my $sambaTimestamp = read_file($sambaTimestampFile);

    my %sambaUsers = map { $_->objectGUID() => $_ } @{$ldb->users()};
    my %sambaContacts = map { $_->objectGUID() => $_ } @{$ldb->contacts()};
    my %sambaGroups = map { $_->objectGUID() => $_ } @{$ldb->groups()};
    my @orderSambaOUs;
    my %sambaOUs;
    foreach my $ou (@{$ldb->ous()}) {
        my $canonicalName = $ou->canonicalName(1);
        if (ignoreOU($canonicalName)) {
            next;
        }
        my $uniqueID = $ou->objectGUID();
        push @orderSambaOUs, $uniqueID;
        $sambaOUs{$uniqueID} = $ou;
    }

    write_file($sambaTimestampFile, getTimestamp());

    my %zentyalUsers = map { $_->get('msdsObjectGUID') => $_ } @{$usersModule->users()};
    my %zentyalContacts = map { $_->get('msdsObjectGUID') => $_ } @{$usersModule->contacts()};
    my %zentyalGroups = map { $_->get('msdsObjectGUID') => $_ } @{$usersModule->groups()};
    my %zentyalOUs    = map { $_->get('msdsObjectGUID') => $_ } @{$usersModule->ous()};

    # As we do not query for system groups, add to the hash the special ones.
    my $defaultGroup = new EBox::Users::Group(gid => $usersModule->DEFAULTGROUP());
    if ($defaultGroup->exists()) {
        my $defaultGroupLink = $defaultGroup->get('msdsObjectGUID');
        if (defined $defaultGroupLink) {
            $zentyalGroups{$defaultGroupLink} = $defaultGroup;
        }
    }
    my $admGroup = new EBox::Users::Group(gid => 'Domain Admins');
    if ($admGroup->exists()) {
        my $admGroupLink = $admGroup->get('msdsObjectGUID');
        if (defined $admGroupLink) {
            $zentyalGroups{$admGroupLink} = $admGroup;
        }
    }
    # As we do not query for system users, add to the hash the special ones.
    my $admUser = new EBox::Users::User(uid => 'Administrator');
    if ($admUser->exists()) {
        my $admUserLink = $admUser->get('msdsObjectGUID');
        if (defined $admUserLink) {
            $zentyalUsers{$admUserLink} = $admUser;
        }
    }

    #################################################
    #### Sync OUs
    #################################################
    foreach my $uniqueID (@orderSambaOUs) {
        my $canonicalName = $sambaOUs{$uniqueID}->canonicalName(1);
        if (exists $zentyalOUs{$uniqueID}) {
            my $changed = $sambaOUs{$uniqueID}->get('whenChanged');
            $changed =~ s/\.\d+Z//;
            if ($changed > $sambaTimestamp) {
                try {
                    $sambaOUs{$uniqueID}->updateZentyal();
                } otherwise {
                    my ($error) = @_;
                    EBox::error("Error updating OU $canonicalName: $error. s4sync will try again in next synchronization");
                };
            }
            delete $zentyalOUs{$uniqueID};
        } else {
            try {
                $sambaOUs{$uniqueID}->addToZentyal();
            } otherwise {
                my ($error) = @_;
                EBox::error("Error adding OU $canonicalName: $error. s4sync will try again in next synchronization");
            };
        }
    }

    foreach my $uniqueID (reverse sort keys %zentyalOUs) {
        my $canonicalName = $zentyalOUs{$uniqueID}->canonicalName(1);
        if (ignoreOU($canonicalName)) {
            next;
        }
        EBox::info("Deleting Zentyal OU '$canonicalName'");
        $zentyalOUs{$uniqueID}->setIgnoredModules(['samba']);
        $zentyalOUs{$uniqueID}->deleteObject();
    }

    #################################################
    #### Sync users
    #################################################
    # Add users that exists in samba but not in Zentyal
    foreach my $uniqueID (sort keys %sambaUsers) {
        my $canonicalName = $sambaUsers{$uniqueID}->canonicalName(1);
        if ((exists $zentyalUsers{$uniqueID})) {
            my $changed = $sambaUsers{$uniqueID}->get('whenChanged');
            $changed =~ s/\.\d+Z//;
            if ($changed > $sambaTimestamp) {
                try {
                    $sambaUsers{$uniqueID}->updateZentyal();
                } otherwise {
                    my ($error) = @_;
                    EBox::error("Error updating user $canonicalName: $error. s4sync will try again in next synchronization");
                };
            }
            delete $zentyalUsers{$uniqueID};
        } else {
            try {
                $sambaUsers{$uniqueID}->addToZentyal();
            } otherwise {
                my ($error) = @_;
                EBox::error("Error adding user $canonicalName: $error. s4sync will try again in next synchronization");
            };
        }
    }

    foreach my $uniqueID (sort keys %zentyalUsers) {
        my $canonicalName = $zentyalUsers{$uniqueID}->canonicalName(1);
        EBox::info("Deleting Zentyal user '$canonicalName'");
        $zentyalUsers{$uniqueID}->setIgnoredModules(['samba']);
        $zentyalUsers{$uniqueID}->deleteObject();
    }

    #################################################
    #### Sync contacts
    #################################################
    # Add contacts that exists in samba but not in Zentyal
    foreach my $uniqueID (sort keys %sambaContacts) {
        my $canonicalName = $sambaContacts{$uniqueID}->canonicalName(1);
        if (exists $zentyalContacts{$uniqueID}) {
            my $changed = $sambaContacts{$uniqueID}->get('whenChanged');
            $changed =~ s/\.\d+Z//;
            if ($changed > $sambaTimestamp) {
                try {
                    $sambaContacts{$uniqueID}->updateZentyal();
                } otherwise {
                    my ($error) = @_;
                    EBox::error("Error updating contact $canonicalName: $error. s4sync will try again in next synchronization");
                };
            }
            delete $zentyalContacts{$uniqueID};
        } else {
            try {
                $sambaContacts{$uniqueID}->addToZentyal();
            } otherwise {
                my ($error) = @_;
                EBox::error("Error adding contact $canonicalName: $error. s4sync will try again in next synchronization");
            };
        }
    }

    foreach my $uniqueID (sort keys %zentyalContacts) {
        my $canonicalName = $zentyalContacts{$uniqueID}->canonicalName(1);
        EBox::info("Deleting Zentyal contact '$canonicalName'");
        $zentyalContacts{$uniqueID}->setIgnoredModules(['samba']);
        $zentyalContacts{$uniqueID}->deleteObject();
    }

    #################################################
    #### Sync groups
    #################################################
    foreach my $uniqueID (keys %sambaGroups) {
        my $canonicalName = $sambaGroups{$uniqueID}->canonicalName(1);
        if ((exists $zentyalGroups{$uniqueID})) {
            my $changed = $sambaGroups{$uniqueID}->get('whenChanged');
            $changed =~ s/\.\d+Z//;
            if ($changed > $sambaTimestamp) {
                try {
                    $sambaGroups{$uniqueID}->updateZentyal();
                } otherwise {
                    my ($error) = @_;
                    EBox::error("Error updating group $canonicalName: $error. s4sync will try again in next synchronization");
                };
            }
            delete $zentyalGroups{$uniqueID};
        } else {
            try {
                $sambaGroups{$uniqueID}->addToZentyal();
            } otherwise {
                my ($error) = @_;
                EBox::error("Error adding group $canonicalName: $error. s4sync will try again in next synchronization");
            };
        }
    }

    foreach my $uniqueID (sort keys %zentyalGroups) {
        my $canonicalName = $zentyalGroups{$uniqueID}->canonicalName(1);
        EBox::info("Deleting Zentyal group '$canonicalName'");
        $zentyalGroups{$uniqueID}->setIgnoredModules(['samba']);
        $zentyalGroups{$uniqueID}->deleteObject();
    }
}
