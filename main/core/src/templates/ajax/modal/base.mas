<%flags>
  inherit => '/ajax/tableBody.mas'
</%flags>
<%args>
  $model
  $action => 'changeAdd'
  $editid => ''
  $hasChanged => 1
  $filter => ''
  $page => 0
  $tpages => 0
  %presetParams => ()
  $hideTable => 1
  $selectCallerId => undef
  $selectForeignField => undef
  $nextPageContextName => undef
  $foreignNextPageField    => undef
</%args>
<%init>
use EBox::Gettext;
use EBox::Model::DataTable;
use POSIX;
</%init>

<& SELF:view,
   model      => $model,
   hasChanged => $hasChanged,
   action     => $action,
   selectCallerId => $selectCallerId,
   selectForeignField => $selectForeignField,
  nextPageContextName => $nextPageContextName,
  foreignNextPageField    => $foreignNextPageField,
&>


<%method view>
<%args>
  $model
</%args>
<& SELF:header,
   model => $model
&>
% if ( $model->precondition() ) {
<div id="<% $model->modelName() %>">
  <& SELF:body,
     @_
  &>
</div>
% }
% else
% {
%   my $failMsg =  $model->preconditionFailMsg();
%   if ($failMsg) {
<div class="note">
  <% $failMsg %>
</div>
%   }
% }
</%method>

<%method header>
<%args>
  $model
</%args>
<& SELF:headerScriptSection &>
<!-- Element to hide the elements while Asynchronous request are -->
<!-- working. Find more information at "table-helper.js"  -->
<div id="<% 'hiddenDiv_' . $model->name() | h %>" class="hidden"></div>

<div id='<% $model->modelName() | hu %>_error'></div>
</%method>


<%doc>
  Method: _body

     Set the model viewer body. Check the overridden method very
     carefully.

  Overrides:

     /ajax/modelViewer.mas:_body

</%doc>
<%method _bodyDisabled>
<%args>
  $model
  $action => 'changeAdd'
  $editid => ''
  $hasChanged => 1
  $filter => ''
  $page => 0
  $tpages => 0
  %presetParams => ()
</%args>
<%init>

  use EBox::Gettext;

  $action = 'changeAdd';

  # Fetch table head from model
  my @tableHead = @{$model->table()->{'tableDescription'}};
  # Pointer to different values for convenience
  my $actions = $model->table()->{'actions'};
  my $changeView = $model->action('changeView');
  my $printableRowName = $model->table()->{'printableRowName'};
  my $tableName = $model->table()->{'tableName'};
  my $printableTableName = $model->table()->{'printableTableName'};

#  # Fetch the edited row if we are editing one
#  my $rowEdit;
#  if ($editid and ($editid ne 'undefined')) {
#          $rowEdit = $model->row($editid);
#  }

  # Fetch the data to be displayed in setters, if we are editing a row
  # we should show the contents of the current fields. If we are
  # adding a new row, the fields are empty except for a preset values
  # adding where preset contents must be shown
  my @formData = @tableHead;
#  if ($rowEdit) {
#      @formData = @{$rowEdit->elements()};
#  } elsif ( ((keys %presetParams) > 0)
#            and $action eq 'presetUpdate') {
#      # The preset is not empty
#      @formData = values(%presetParams);
#  }
#
  if ( ((keys %presetParams) > 0)
            and $action eq 'presetUpdate') {
      # The preset is not empty
      @formData = values(%presetParams);
  }
#  # If the action is a preset update, choose for an edition or an
#  # addition whether the editid is set or not
#  if ( $action eq 'presetUpdate' ) {
#      $action = 'changeAdd' if (not $editid);
#      $action = 'changeEdit' if ( $editid );
#  }
</%init>

<div id="<% 'hiddenDiv_' . $model->name() | h %>" class="hidden"></div>
<div id='<% $model->modelName() | hu %>_error'></div>

<div id="<% $model->modelName() %>">
<& SELF:messagesAndHelp, model => $model &>
<%doc>
XXX remove
% if ( $model->pageTitle() ) {
%      my $viewCustomizer = $model->viewCustomizer();
%      my $msg = $viewCustomizer ? $viewCustomizer->permanentMessage() : undef;
%      if ($msg) {
<& /msg.mas,
   msg => $msg
&>
%      }
%      if ( $model->message() ) {
<& /msg.mas,
   msg => $model->popMessage(),
   class => $model->messageClass()
&>
%      }
% }



% if ($model->help()) {
<div class="help">
  <% $model->help() %>
</div>
% }

</%doc>
<%doc>
%  if ( $action ne 'changeAdd' and $action ne 'changeEdit' )  {
%    if ( $model->printableModelName() )
%    {
<& PARENT:title,
   title => $model->headTitle()
&>
%    }
%    if ($changeView and exists $actions->{'add'})
%    {
  <button type="button" class='btn btn-icon btn-add'
      name='add'
         onClick="<%
                 $model->changeViewJS( changeType => "changeAdd",
                      editId => "undefined",
                      page => $page,
                      isFilter => 0)
                %>;return false"><% __('Add new') %></button>
   <br/>
   <br/>
%    }
  <span id="<% 'creatingForm_' . $tableName %>"></span>
%  }
</%doc>
<%doc>
%  if ( $action eq 'changeAdd' or $action eq 'changeEdit' )  {
%   if ( $action eq 'changeAdd' )
%    {
%     my $addingStr = __x('Adding a new {row}', row => $printableRowName);
<& PARENT:title, title => $addingStr &>
%    }
%   elsif ( $action eq 'changeEdit' )
%    {
%     my $editingStr = __x('Editing {row}', row => $printableRowName);
<& PARENT:title, title => $editingStr &>
%   }
</%doc>

<form name="<% $tableName . '_form' %>">
  <table class='formTable'>
    <tbody>
     <col width="1*" />
     <col width="auto" />
       <& /ajax/changeRowForm.mas,
          action => $action,
          model  => $model,
          editid => $editid,
          filter => $filter,
          page   => $page,
          tpages => $tpages,
          presetParams  => \%presetParams,
          printableRowName => $model->printableRowName
       &>
    </tbody>
  </table>
</form>

%   my $customizer = $formData[0]->model()->viewCustomizer();
%   if ($customizer) {
<script>
<%   $customizer->onChangeActionsJS() %>
</script>
%    }

%#  }

</div>
% # End body method
</%method>
